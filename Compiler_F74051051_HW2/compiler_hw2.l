/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
extern void dump_symbol();
struct data{
	char id[30];
    int entry_type;
    char type_name[10];
	int scope;
    char attribute[30];
	int type;
    int int_value;
    double dou_value;
    int assign_bit;
};
extern struct data symbol_table[100];
extern int function_declaration_flag;
extern char global_error_msg[30];
extern int redeclared_function_flag;
extern void semantic_error(char *s);
char buf[255];
int dump_flag;
int semantic_flag;

#define BUF_SIZE 256

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT_STATE STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT return ADD; }
"-" 	{ CONCAT return SUB; }
"*" 	{ CONCAT return MUL; }
"/" 	{ CONCAT return DIV; }
"%"     { CONCAT return MOD;}
"++"    { CONCAT return INC; }
"--"    { CONCAT return DEC; }
 /* Relational */
">"		{ CONCAT return MT;  }
"<"		{ CONCAT return LT; }
">="	{ CONCAT return MTE; }
"<="	{ CONCAT return LTE;}
"=="	{ CONCAT return EQ; }
"!="	{ CONCAT return NE; }

 /* Assignment */
"="		{ CONCAT return ASGN; }
"+="	{ CONCAT return ADDASGN; }
"-="	{ CONCAT return SUBASGN; }
"*="	{ CONCAT return MULASGN; }
"/="	{ CONCAT return DIVASGN; }
"%="	{ CONCAT return MODASGN; }

 /* Logical */
"&&"	{ CONCAT return AND; }
"||"	{ CONCAT return OR; }
"!"		{ CONCAT return NOT;  }

 /* Delimiters */
"("		{ CONCAT return LB; }
")"		{ CONCAT return RB; }
"{"		{ CONCAT return LCB; }
"}"		{ CONCAT return RCB; }
"["		{ CONCAT return LSB; }
"]"		{ CONCAT return RSB; }
","		{ CONCAT return COMMA; }

 /* Print Keywords */	
"print"		{ CONCAT return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT return IF; }
"else"		{ CONCAT return ELSE; }
"for"		{ CONCAT return FOR; }
"while"		{ CONCAT return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT yylval.string = malloc(10 * sizeof(char)); strcpy(yylval.string, yytext); return VOID; }
"int"		{ CONCAT yylval.string = malloc(10 * sizeof(char)); strcpy(yylval.string, yytext); return INT; }
"float"  	 { CONCAT yylval.string = malloc(10 * sizeof(char)); strcpy(yylval.string, yytext); return FLOAT; }
"string"  	{ CONCAT yylval.string = malloc(10 * sizeof(char)); strcpy(yylval.string, yytext); return STRING; }
"bool"  	{ CONCAT yylval.string = malloc(10 * sizeof(char)); strcpy(yylval.string, yytext); return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT return TRUE; }
"false"     { CONCAT return FALSE; }
"continue"  { CONCAT return CONT; }
"break"     { CONCAT return BREAK; }
"return"    { CONCAT return RET; }

 /* String Constant */
\"				        { BEGIN STRING_STATE; CONCAT }
<STRING_STATE>\"		{ BEGIN INITIAL; CONCAT }
<STRING_STATE>[^"]*		{ CONCAT yylval.string = malloc(10 * sizeof(char)); strcpy(yylval.string, yytext); return STR_CONST; }

 /* Number Constant */
{integer}	{ CONCAT yylval.i_val = atoi(yytext); return I_CONST; }
{float}	     { CONCAT yylval.f_val = atoi(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT_STATE; CONCAT }
<COMMENT_STATE>[^*\n]+	{ CONCAT }
<COMMENT_STATE>\n		{ 
                            CONCAT 
                            if(!strcmp(buf, "\n")){
                                printf("%d:",yylineno);
                            }else{
                                printf("%d: ",yylineno);
                            }
                            printf("%s",buf);
                            memset( buf, '\0', strlen(buf) ); 
                        }
<COMMENT_STATE>"*"		{ CONCAT }
<COMMENT_STATE>"*/"		{  BEGIN INITIAL; CONCAT }

 /* C++ type Comment */
\/\/.*	{ CONCAT }

 /* Variable ID */
 {id}       { CONCAT yylval.string = malloc(10 * sizeof(char)); strcpy(yylval.string, yytext); return ID; }

 /* others */

[;]         { CONCAT return SEMICOLON; }
[\n]        {
                if(!function_declaration_flag&&!redeclared_function_flag||!function_declaration_flag){
                    CONCAT
                }
                if(function_declaration_flag){
                    semantic_error(global_error_msg);
                    function_declaration_flag = 0;
                }
                if(redeclared_function_flag){
                    semantic_error(global_error_msg);
                    redeclared_function_flag = 0;
                }
                if(semantic_flag){
                    if(!strcmp(buf, "\n")){
                        printf("%d:",yylineno);
                    }else{
                        printf("%d: ",yylineno);
                    }
                    printf("%s",buf);
                    memset( buf, '\0', strlen(buf) ); 
                }else { 
            
                    memset( buf, '\0', strlen(buf) );
                    semantic_flag = 1;
                } 
                if(dump_flag){
                    dump_symbol();
                    dump_flag = 0;
                }
            }
[ \t]		{ CONCAT } /* Ignore */
[^ \t\n] 	{ CONCAT } /* Ignore other charactor sets */
<<EOF>>     { return 0; }

%%

int yywrap()
{
    return 1;
}
